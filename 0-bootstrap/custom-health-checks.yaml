apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  extraConfig:
    resource.customizations: |
      scheduling.scheduler.spectrumcomputing.ibm.com:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.cpd-schedulingStatus ~=nil then
              if obj.status.cpd-schedulingStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.cpd-schedulingStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      wspipelines.cpd.ibm.com/WSPipelines:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.wspipelinesStatus ~= nil then
              if obj.status.wspipelinesStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.wspipelinesStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      wkc.cpd.ibm.com/WKC:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.wkcStatus ~= nil then
              if obj.status.wkcStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.wkcStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      ds.cpd.ibm.com/DataStage:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.dsStatus ~= nil then
              if obj.status.dsStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.dsStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      openpages.cpd.ibm.com/OpenPagesService:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.openpagesStatus ~= nil then
              if obj.status.openpagesStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.openpagesStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      ca.cpd.ibm.com/CAService:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.caStatus ~= nil then
              if obj.status.caStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.caStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      datarefinery.cpd.ibm.com/DataRefinery:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.datarefineryStatus ~= nil then
              if obj.status.datarefineryStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.datarefineryStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      factsheet.cpd.ibm.com/FACTSHEET:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.factsheetStatus ~= nil then
              if obj.status.factsheetStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.factsheetStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      ikc.cpd.ibm.com/IKCStandard:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.ikcstandardStatus ~= nil then
              if obj.status.ikcstandardStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.ikcstandardStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      ws.cpd.ibm.com/NotebookRuntime:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.runtimeStatus ~= nil then
              if obj.status.runtimeStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.runtimeStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      watsonxaiifm.cpd.ibm.com/Watsonxaiifm:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.watsonxaiifmStatus ~= nil then
              if obj.status.watsonxaiifmStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.watsonxaiifmStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      syntheticdata.cpd.ibm.com/Syntheticdata:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.syntheticdataStatus ~= nil then
              if obj.status.syntheticdataStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.syntheticdataStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      watsonxgovernance.cpd.ibm.com/Watsonxgovernance:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.watsonxGovernanceStatus ~= nil then
              if obj.status.watsonxGovernanceStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.watsonxGovernanceStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      watsonxai.cpd.ibm.com/Watsonxai:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.watsonxaiStatus ~= nil then
              if obj.status.watsonxaiStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.watsonxaiStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      mdm.cpd.ibm.com/MasterDataManagement:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.mdmStatus ~= nil then
              if obj.status.mdmStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.mdmStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      ccs.cpd.ibm.com/CCS:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.ccsStatus ~= nil then
              if obj.status.ccsStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.ccsStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      databases.cpd.ibm.com/Db2aaserviceService:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.db2aaserviceStatus ~= nil then
              if obj.status.db2aaserviceStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.db2aaserviceStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      databases.cpd.ibm.com/Db2oltpService:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.db2oltpStatus ~= nil then
              if obj.status.db2oltpStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.db2oltpStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs             
      wml.cpd.ibm.com/WmlBase:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.wmlStatus ~= nil then
              if obj.status.wmlStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.wmlStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      pa.cpd.ibm.com/PAService:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Available" and condition.status == "True"  then
                  hs.status="Healthy"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Progressing" then
                  hs.status = "Progressing"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Error" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      wos.cpd.ibm.com/WOService:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Failure" and condition.status == "True" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Successful" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      ws.cpd.ibm.com/WS:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.wsStatus ~= nil then
              if obj.status.wsStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.wsStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      config.mas.ibm.com/WatsonStudioCfg:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Failure" and condition.status == "True" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Ready" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      operator.ibm.com/OperandRequest:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Ready" and condition.reason == "operator is ready" and condition.status == "False" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Ready" and condition.reason == "operator is ready" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      operators.coreos.com/Subscription:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.installedCSV ~= nil then
              hs.status = "Progressing"
              hs.message = "CSV Installed"
              if obj.status.state ~= nil then
                hs.message = obj.status.state
                if obj.status.state == "AtLatestKnown" then
                  hs.status = "Healthy"
                end
              end
              return hs
            end
          end
          hs.status = "Progressing"
          hs.message = "Unknown"
          return hs

      operators.coreos.com/InstallPlan:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.phase ~= nil then
              hs.message = obj.status.phase
              if obj.status.phase == "Complete" then
                hs.status = "Healthy"
              else
                hs.status = "Progressing"
              end
              return hs
            end
          end
          hs.status = "Progressing"
          hs.message = "Unknown"
          return hs

      db2u.databases.ibm.com/Db2uCluster:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.state ~= nil then
              if obj.status.state == "LicenseError" or obj.status.state == "Error" then
                hs.status = "Degraded"
                hs.message = "General Error or License Error"
                return hs
              end
              if obj.status.state == "Ready" then
                hs.status = "Healthy"
                hs.message = obj.status.conditions.status
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Provisioning Db2 instance..."
          return hs

      db2u.databases.ibm.com/Db2uInstance:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.state ~= nil then
              if obj.status.state == "LicenseError" or obj.status.state == "Error" then
                hs.status = "Degraded"
                hs.message = "General Error or License Error"
                return hs
              end
              if obj.status.state == "Ready" then
                hs.status = "Healthy"
                hs.message = obj.status.conditions.status
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Provisioning Db2 instance..."
          return hs

      dp.cpd.ibm.com/v1beta1:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.dpStatus ~= nil then
              if obj.status.dpStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.dpStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs      

      marketplace.redhat.com/MarketplaceConfig:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Complete" and condition.status == "False" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Complete" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      operators.coreos.com/CatalogSource:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.connectionState ~= nil then
              if obj.status.connectionState.lastObservedState == "IDLE" then
                hs.status = "Progressing"
                hs.message = "Waiting for CatalogSource to be ready..."
                return hs
              end
              if obj.status.connectionState.lastObservedState ~= "READY" then
                hs.status = "Degraded"
                hs.message = "Error"
                return hs
              end
              if obj.status.connectionState.lastObservedState == "READY" then
                hs.status = "Healthy"
                hs.message = obj.status.connectionState.lastObservedState
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Provisioning CatalogSource instance..."
          return hs

      argoproj.io/Application:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.health ~= nil then
              hs.status = obj.status.health.status
              if obj.status.health.message ~= nil then
                hs.message = obj.status.health.message
              end
            end
          end
          return hs

      nvidia.com/ClusterPolicy:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.state ~= nil then
              if obj.status.state ~= "ready" then
                hs.status = "Degraded"
                hs.message = "Error"
                return hs
              end
              if obj.status.state == "ready" then
                hs.status = "Healthy"
                hs.message = obj.status.state
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Provisioning nvidia ClusterPolicy instance..."
          return hs

      cpd.ibm.com/Ibmcpd:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.controlPlaneStatus ~= nil then
              if obj.status.controlPlaneStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.controlPlaneStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      ae.cpd.ibm.com/AnalyticsEngine:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.analyticsengineStatus ~= nil then
              if obj.status.analyticsengineStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = ""
                return hs
              end
              if obj.status.analyticsengineStatus == "Failed" then
                hs.status = "Degraded"
                hs.message = ""
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      spssmodeler.cpd.ibm.com/Spss:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Failure" and condition.status == "True" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Successful" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      zen.cpd.ibm.com/ZenService:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.zenStatus ~= nil then
              if obj.status.zenStatus ~= "Completed" and obj.status.zenStatus ~= "InProgress" then
                hs.status = "Degraded"
                hs.message = obj.status.zenMessage
                return hs
              end
              if obj.status.zenStatus == "Completed" then
                hs.status = "Healthy"
                hs.message = obj.status.zenMessage
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      compliance.openshift.io/TailoredProfile:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.state ~= nil then
              if obj.status.state ~= "READY" then
                hs.status = "Degraded"
                hs.message = "Error"
                return hs
              end
              if obj.status.state == "READY" then
                hs.status = "Healthy"
                hs.message = obj.status.state
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Provisioning TailoredProfile instance..."
          return hs

      compliance.openshift.io/ScanSettingBinding:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Failure" and condition.status == "True" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Ready" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs

      operator.openshift.io/CertManager:
        health.lua: |
          hs = {}

          cm_cainjector_deployed = "False"
          cm_webhook_deployed = "False"
          cm_controller_deployed  = "False"

          cm_cainjector_degraded = "False"
          cm_webhook_degraded = "False"
          cm_controller_degraded  = "False"

          cm_cainjector_progressing = "False"
          cm_webhook_progressing = "False"
          cm_controller_progressing  = "False"

          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do

                if condition.type == "cert-manager-cainjector-deploymentAvailable" and condition.status == "True" then
                  cm_cainjector_deployed = "True"
                end

                if condition.type == "cert-manager-webhook-deploymentAvailable" and condition.status == "True" then
                  cm_webhook_deployed = "True"
                end

                if condition.type == "cert-manager-controller-deploymentAvailable" and condition.status == "True" then
                  cm_controller_deployed = "True"
                end

                if condition.type == "cert-manager-cainjector-deploymentDegraded" and condition.status == "True" then
                  cm_cainjector_degraded = "True"
                end

                if condition.type == "cert-manager-webhook-deploymentDegraded" and condition.status == "True" then
                  cm_webhook_degraded = "True"
                end

                if condition.type == "cert-manager-controller-deploymentDegraded" and condition.status == "True" then
                  cm_controller_degraded = "True"
                end

                if condition.type == "cert-manager-cainjector-deploymentProgressing" and condition.status == "True" then
                  cm_cainjector_progressing = "True"
                end

                if condition.type == "cert-manager-webhook-deploymentProgressing" and condition.status == "True" then
                  cm_webhook_progressing = "True"
                end

                if condition.type == "cert-manager-controller-deploymentProgressing" and condition.status == "True" then
                  cm_controller_progressing = "True"
                end

                if cm_cainjector_deployed == "True" and cm_webhook_deployed == "True" and cm_controller_deployed == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end

                if cm_cainjector_degraded == "True" or cm_webhook_degraded == "True" or cm_controller_degraded == "True" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end

                if cm_cainjector_progressing == "True" or cm_webhook_progressing == "True" or cm_controller_progressing == "True" then
                  hs.status = "Progressing"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
      pa.cpd.ibm.com/PAServiceInstance:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Available" and condition.status == "True"  then
                  hs.status="Healthy"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Progressing" then
                  hs.status = "Progressing"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "Error" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = ""
          return hs
